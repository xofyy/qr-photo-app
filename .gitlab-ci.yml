stages:
  - test
  - build
  - deploy

variables:
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.9"

# Frontend CI/CD
frontend-test:
  stage: test
  image: node:${NODE_VERSION}
  before_script:
    - cd frontend
    - npm install
  script:
    - npm run test -- --coverage --watchAll=false --passWithNoTests
    - npm run build
  artifacts:
    paths:
      - frontend/build/
    expire_in: 1 hour
  only:
    changes:
      - frontend/**/*

# Backend CI/CD
backend-test:
  stage: test
  image: python:${PYTHON_VERSION}
  before_script:
    - cd backend
    - pip install -r requirements.txt
  script:
    - python -m pytest --cov=app tests/
    - python -m flake8 app/
  artifacts:
    paths:
      - backend/coverage.xml
  only:
    changes:
      - backend/**/*

# Lint checks
frontend-lint:
  stage: test
  image: node:${NODE_VERSION}
  before_script:
    - cd frontend
    - npm install
  script:
    - echo "Lint script not found, skipping for now..."
    # - npm run lint  # TODO: Add lint script to package.json
  only:
    changes:
      - frontend/**/*
  allow_failure: true

# Security scan
security-scan:
  stage: test
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install safety bandit
  script:
    - cd backend && safety check -r requirements.txt
    - cd backend && bandit -r app/
  allow_failure: true

# Build Docker images
build-frontend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build 
      --build-arg REACT_APP_API_URL=$REACT_APP_API_URL
      --build-arg REACT_APP_WS_URL=$REACT_APP_WS_URL
      --build-arg REACT_APP_GA_TRACKING_ID=$REACT_APP_GA_TRACKING_ID
      -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA 
      frontend/
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
  dependencies:
    - frontend-test
  only:
    - main
    - develop

build-backend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA backend/
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
  dependencies:
    - backend-test
  only:
    - main
    - develop

# Deploy to staging
deploy-staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$STAGING_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $STAGING_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $STAGING_USER@$STAGING_HOST "
        docker pull $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA &&
        docker pull $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA &&
        docker-compose -f docker-compose.staging.yml down &&
        CI_COMMIT_SHA=$CI_COMMIT_SHA docker-compose -f docker-compose.staging.yml up -d
      "
  environment:
    name: staging
    url: $STAGING_URL
  dependencies:
    - build-frontend
    - build-backend
  only:
    - develop

# Deploy to production
deploy-production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$PRODUCTION_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PRODUCTION_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $PRODUCTION_USER@$PRODUCTION_HOST "
        echo '$PRODUCTION_DEPLOY_TOKEN' | docker login registry.gitlab.com -u '$PRODUCTION_DEPLOY_USER' --password-stdin &&
        docker pull $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA &&
        docker pull $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA &&
        docker-compose -f docker-compose.production.yml down &&
        export CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE &&
        export CI_COMMIT_SHA=$CI_COMMIT_SHA &&
        export MONGODB_URL='$MONGODB_URL' &&
        export DATABASE_NAME='$DATABASE_NAME' &&
        export CLOUDINARY_CLOUD_NAME='$CLOUDINARY_CLOUD_NAME' &&
        export CLOUDINARY_API_KEY='$CLOUDINARY_API_KEY' &&
        export CLOUDINARY_API_SECRET='$CLOUDINARY_API_SECRET' &&
        export FRONTEND_URL='$FRONTEND_URL' &&
        export JWT_SECRET='$JWT_SECRET' &&
        export GOOGLE_CLIENT_ID='$GOOGLE_CLIENT_ID' &&
        export GOOGLE_CLIENT_SECRET='$GOOGLE_CLIENT_SECRET' &&
        docker-compose -f docker-compose.production.yml up -d
      "
  environment:
    name: production
    url: $PRODUCTION_URL
  dependencies:
    - build-frontend
    - build-backend
  when: manual
  only:
    - main

# Health check after deployment
health-check:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - sleep 30  # Wait for services
    - curl -f $STAGING_URL/health || exit 1
    - curl -f $STAGING_URL/api/health || exit 1
  dependencies:
    - deploy-staging
  only:
    - develop